- [1. General](#1-general)
- [2. CRUD with GET, PUT, POST \& DELETE](#2-crud-with-get-put-post--delete)
  - [2.1 req.querry/req.params \& req.body](#21-reqquerryreqparams--reqbody)


# 1. General
- npm init -y: instant package create.
- package.json "type": "module" = ES6 import/export syntax.

# 2. CRUD with GET, PUT, POST & DELETE

## 2.1 req.querry/req.params & req.body

- **GET, DELETE method**: các bộ lọc/điều kiện được truyền qua req.querry và req.params để trả kết quả tương ứng cho client, còn req.body không hề chứa data nào ({}).

- **PUT, PATCH, POST method** - là các phương thức được gửi đến server để thay đổi DB bằng data tương ứng chứa trong req.body. Các request này cũng chứa thông tin về bộ lọc/điều kiện trong req.querry/req.params để xác định đối tượng nào trong DB sẽ được thay đổi.
_
- Moi request deu co body, nen trong logic xu ly co the lam dc nhieu chuc nang hon so voi ten goi cua method do._

**Exp:** 

    Cho data `user = {id: 1, name: "Zoker"}`

    PUT: /user/id=1&name=Tin

    + PUT là method để update 1 data có sẵn.
    + id=1 là req.querry để xác định (filter/identify) đối tượng cần update.
    + name=Tin là data được chứa trong req.body, dùng để update username hiện tại từ "Zoker" thành "Tin".

    POST /user/id=2&name=Tin

    + POST là method để thêm data mới vào DB.
    + cả id=2 và name=Tin đều được chứa trong req.body, là data sẽ được dùng để thêm mới vào DB hiện có.

_Khi truyền các querry và params vào method, cần gán chúng vào req.querry/req.params và req.body một cách phù hợp với method đó để có thể lọc ra đúng đối tượng cần thay đổi và thực hiện thao tác thay đổi._

**Exp:**

    `"/user/:id?name=<...>"`

    app.put('/users/:id', (req, res) => {

    const idToUpdate = req.params.id;
    //extract "id" param from URL, assign it to "idToUpdate" and add it into the req.params obj, use to filter/identify which data will be updated.

    const newName = req.body.name;
    //extract "name", assign it to "newName" and add it into the req.body obj, use as the data to update.

    // find the user with the given ID and update their name
    const user = users.find(user => user.id === parseInt(idToUpdate));
    if (user) {
        user.name = newName;
        res.status(200).send(user);
    } else {
        res.status(404).send('User not found');
    }
    });
    

